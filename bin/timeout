#!/usr/bin/perl
#
# Run a command with a timeout.  Optionally send a signal and/or run a
# command on timeout.  Exits with the exit status of the command, or 254
# if timeout happened first.

use strict;
use warnings;

use Config;
use Getopt::Long qw(:config pass_through);
use POSIX qw(:sys_wait_h setsid);

my %opts;

sub debug {
  warn @_, "\n" if $opts{verbose};
}

(my $ME = $0) =~ s,.*/,,;

GetOptions(
  \%opts,
  'help|h', 'verbose|v',
  'signal|s=s', 'command|c=s', 'kill|k',
) or usage();
usage() if @ARGV == 0 or $opts{help};

sub usage {
  warn @_, "\n" if @_;

  die <<EOUSAGE;
Usage: $ME [options] TIMEOUT COMMAND ARGS
Timeout is in seconds.
Options:
  -h, --help               Show this help
  -k, --kill               On timeout, send TERM signal then KILL if needed
  -s, --signal=SIG, -SIG   On timeout, send signal SIG (e.g. 9 or KILL)
  -c, --command=CMD        On timeout, run command 
  -v, --verbose            Show progress in more detail

The signal gets sent to the child's process group, not just the child.
That's to deal with the case where the child is a shell process.  So?
Signal handlers in bash are ineffectual while bash is blocking on a
waitpid(-1), and I can't see how to avoid this waitpid when the script
needs to wake up and do other stuff once its child has completed.
EOUSAGE
}

my $signum = get_signal();
debug("$ME: may use signal $signum" .
        ($opts{kill} ? " and signal 9" : ''))
  if $signum;

usage() unless @ARGV >= 2;
my ($timeout, $command, @args) = @ARGV;

my $pid = fork();
if (! $pid) {
  # child
  setsid;
  exec $command, @args;
}

# parent
debug("child pid is $pid");

$SIG{ALRM} = sub {
  debug("pid $pid timed out after $timeout seconds");
  if (defined $signum) {
    if (my $pgrp = getpgrp($pid)) {
      debug("Sending signal $signum to pgrp $pgrp ...");
      kill -$signum, $pgrp;
    }
    elsif (defined $pid) {
      warn "WTF? pid $pid exists but getpgrp($pid) failed"; 
      debug("Sending signal $signum to pid $pid");
      kill $signum, $pid;
    }
    
    if ($opts{kill}) {
      my $pgrp;
      my $tries = 0;
      do {
        waitpid($pid, WNOHANG); # reap zombie
        $pgrp = getpgrp($pid);
        if (getpgrp($pid) > 0) {
          debug("pid $pid still exists; sleeping a second ...");
          sleep 1;
          $tries++;
        }
      } while $pgrp > 0 and $tries < 3;
      if ($pgrp > 0) {
        debug("pid $pid STILL exists; sending KILL to pgrp $pgrp");
        kill -9, $pid;
      }
    }
  }
  system($opts{command}) if defined $opts{command};
  exit 254;
};
alarm $timeout;
debug("alarm set");

wait;
debug("wait finished, \$? == $?");

exit $? >> 8;

# Which signal to send on timeout?
sub get_signal {
  # Is -KILL or -9 syntax being used?
  my $short_signal = $ARGV[0] =~ /^-(.+)/ ? $1 : undef;
  my $count = 0;
  foreach my $mode ($short_signal, $opts{signal}, $opts{kill}) {
    $count++ if defined $mode;
  }
  usage("Cannot specify more than one of --signal, -SIG, and --kill\n")
    if $count > 1;

  return 15 if $opts{kill};

  shift @ARGV if $short_signal;

  return canonise_signal(defined($short_signal) ? $short_signal : $opts{signal});
}

# Returns the signal number.
sub canonise_signal {
  my ($signal) = @_;

  return undef unless defined $signal;

  my @signals = split ' ', $Config{sig_name};
  die "$ME: BUG reading signal names" unless $signals[9] eq 'KILL';
  my %sig2num = map { $signals[$_] => $_ } 0 .. $#signals;
  my %num2sig = map { $_ => $signals[$_] } 0 .. $#signals;

  if ($signal =~ /^(\d\d?)$/ && $num2sig{$signal}) {
    return $signal;
  }
  elsif ((uc $signal) =~ /^([A-Z][A-Z12]+)$/ && exists $sig2num{uc $signal}) {
    return $sig2num{uc $signal};
  }
  else {
    usage("Didn't recognise weird signal '$signal'\n");
  }
}

